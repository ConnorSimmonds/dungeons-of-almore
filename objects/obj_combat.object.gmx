<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Constants
BATTLE_OPTIONS = "ATTACK#SKILL#DEFEND#ITEM#TEAM#FLEE"

//Options in battle
ATTACK_OPTION = 0;
SKILL_OPTION = 1;
DEFEND_OPTION = 2;
ITEM_OPTION = 3;
DOUBLE_OPTION = 4;
FLEE_OPTION = 5;

//States
STATE_MAIN = 0; //Main state of selecting attacks etc. basically main menu
STATE_ATTACK = 1; //Attack menu
STATE_SKILL = 2; //SKill menu
STATE_DEFEND = 3; //Defend menu
STATE_ITEM = 4; //Item menu
STATE_DOUBLE_ATTACK = 5; //Team attack menu
STATE_FLEE = 6; //Flee menu
STATE_TARGET = 7; //Targeting menu
STATE_TURN_END = 8; //Turn end
STATE_EXECUTE = 9; //Executing turn menu
STATE_MESSAGE = 10;
STATE_VICTORY = 11;
STATE_DEFEAT = 12;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//UI vars
selectWidth = floor(75.5*global.guiScale);
selectHeight = floor((48+15.5)*global.guiScale)

skillSelectWidth =  floor(180.5*global.guiScale);
skillSelectHeightBase = 25;
skillSelectHeight = floor((skillSelectHeightBase+7.5)*global.guiScale)

backButtonX = (sprite_get_width(spr_backButton)/2) * global.guiScale;
backButtonY = view_hport[0] - ((sprite_get_height(spr_backButton)/2) * global.guiScale);

doubleTeamX = view_wview[0] - (sprite_get_width(spr_menuBar) * global.guiScale)
doubleTeamY = 50;

for(i = 4; i &gt;= 0; i--){
    partyHeight[i] = 0;
}

enemy_x = (view_wport[0]/7)*2;
enemy_y = (view_hport[0]/2);

//Quick checks on selectWidth and Height etc.
if(selectWidth % 2 == 0){
    selectWidth++;
}

if(selectHeight % 2 == 0){
    selectHeight++;
}

if(skillSelectWidth % 2 == 0){
    skillSelectWidth++;
}

if(skillSelectHeight % 2 == 0){
    skillSelectHeight++;
}

//Logical Vars
menu = ATTACK_OPTION;
state = STATE_MESSAGE;
prevState = state;

//Skill Vars
skillSelect = 0;
skillString = "TEST#TEST2";

//Enemy Selection
enemies[2] = 0; //Enemy ID - determines stats etc.
enemySelect = 0; //we have at least one enemy at all times
enemyHP[0] = 10;
enemyHP[1] = 10;
enemyHP[2] = 10; //enemy hp - we get this based off of the enemy id, and store it here for later.

//Turn Vars
playerSelect = 0;
target[4] = 0;
action[4] = 0;
turn_queue = ds_priority_create();
player_turns[4] = 0;
intended_turn_order = scr_player_intended_turn();
temp_turn = scr_player_intended_turn();
turnSelect = -1;

element_chain_list = ds_list_create(); //Keeps track of elements that have been used for the chains
chain_multiplier = 0;
burst_multiplier = 0;

battleMessage = "Enemies approach!";
battleMessageDisplay = "";
battleMessageTimer = 0;
battleMessageMax = 2;
battleMessageQueue = ds_queue_create();
battleMessageGetNext = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_priority_destroy(turn_queue); //we need to clear this out
ds_queue_destroy(battleMessageQueue);

if(instance_exists(obj_player)){
    obj_player.state = obj_player.STATE_NORMAL;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_combat_state(state);
scr_combat_party_graphic();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i;
draw_sprite_ext(spr_headIcons,0,0,0,global.guiScale,global.guiScale,0,image_blend,image_alpha);
draw_sprite_ext(spr_menuBar,1,0,0,global.guiScale,global.guiScale,0,image_blend,image_alpha);

//Enemies
for(var i = 0; i &lt; array_length_1d(enemies); i++){
    if(enemies[i] != -1){
        draw_sprite(spr_enemy,enemies[i],enemy_x + (i * 160),enemy_y);
    }
}

var c_char = obj_party.character[playerSelect];

//Draw the HP bars
draw_sprite_ext(spr_bar,0,72*global.guiScale,4*global.guiScale,global.guiScale,global.guiScale,0,image_blend,image_alpha);
draw_sprite_ext(spr_bar,0,72*global.guiScale,11*global.guiScale,global.guiScale,global.guiScale,0,image_blend,image_alpha);
draw_sprite_part_ext(spr_bar,1,0,0,sprite_get_width(spr_bar)*(c_char[? obj_party.HP]/c_char[? obj_party.MAX_HP]),sprite_get_height(spr_bar),49*global.guiScale,2*global.guiScale,global.guiScale,global.guiScale,image_blend,image_alpha)
draw_sprite_part_ext(spr_bar,2,0,0,sprite_get_width(spr_bar)*(c_char[? obj_party.MP]/c_char[? obj_party.MAX_MP]),sprite_get_height(spr_bar),49*global.guiScale,9*global.guiScale,global.guiScale,global.guiScale,image_blend,image_alpha)


//Menu stuff
if(state != STATE_TARGET &amp;&amp; state != STATE_EXECUTE){
    draw_sprite_ext(spr_menuBar,0,0,0,global.guiScale,global.guiScale,0,image_blend,image_alpha);
    
    //Draw the selection square
    shader_set(sh_selectionShader);
    draw_rectangle_colour(0,(((48*global.guiScale)+(17*global.guiScale)*menu)),(selectWidth),(selectHeight+((17*global.guiScale)*menu)),c_yellow,c_yellow,c_yellow,c_yellow,0);
    shader_reset();
    
    //Draw the text
    draw_set_colour(c_black);
    draw_text_ext_transformed(5*global.guiScale,49*global.guiScale,BATTLE_OPTIONS,17,-1,global.guiScale,global.guiScale,0)
    
    if(state == STATE_SKILL){ //Open up the skill menu
        draw_sprite_ext(spr_menuBar,2,76*global.guiScale,0,global.guiScale,global.guiScale,0,image_blend,image_alpha);
        
        //Draw the selection square (skill editon)
        draw_rectangle_colour(77*global.guiScale,(((skillSelectHeightBase*global.guiScale)+(9*global.guiScale)*skillSelect)),(skillSelectWidth),(skillSelectHeight+((9*global.guiScale)*skillSelect)),c_yellow,c_yellow,c_yellow,c_yellow,0);
        
        //Draw more text
        draw_set_colour(c_black);
        draw_text_ext_transformed(86*global.guiScale,25*global.guiScale,skillString,18,-1,global.guiScale/2,global.guiScale/2,0)
    } else if(state == STATE_DOUBLE_ATTACK){
    draw_sprite_ext(spr_menuBar,3,doubleTeamX,doubleTeamY,global.guiScale,global.guiScale,0,c_white,1);
    shader_set(sh_selectionShader);
    draw_rectangle_colour(doubleTeamX+(1*global.guiScale),(doubleTeamY + ((11*global.guiScale)*skillSelect))+(1*global.guiScale),doubleTeamX+(62*global.guiScale),(doubleTeamY + ((9*global.guiScale)*skillSelect))+(9*global.guiScale),c_yellow,c_yellow,c_yellow,c_yellow,0);
    shader_reset();
    
    for(i = 0; i &lt; 5; i++){
        c_char = obj_party.character[i];
        draw_sprite_ext(spr_faceplate,c_char[? obj_party.IMAGE],doubleTeamX,(doubleTeamY + ((11*global.guiScale)*i)),global.guiScale,global.guiScale,0,image_blend,image_alpha);
    }
    
    }
} else if(state == STATE_TARGET){
    draw_sprite_ext(spr_bar,0,(enemy_x-90 + (enemySelect * 80))*2,90*2,global.guiScale,global.guiScale,0,image_blend,image_alpha);
    draw_sprite_part_ext(spr_bar,1,0,0,sprite_get_width(spr_bar)*enemyHP[enemySelect]/10,sprite_get_height(spr_bar),(enemy_x-113 + (enemySelect * 80))*2,88*2,global.guiScale,global.guiScale,image_blend,image_alpha)
    draw_sprite_ext(spr_backButton,0,backButtonX,backButtonY,global.guiScale,global.guiScale,0,image_blend,image_alpha);
}
//Player Faceplates
if(playerSelect != -1){ //If it's the player's turn...
    var t_index = 0
    var row_pos = 0;
    with(obj_party){
        for(i = 0; i &lt; 6; i++){
            if(formation[i/3,i mod 3] != -1){
                c_char = character[t_index];
                if(i div 3 == 0){
                    draw_sprite_ext(spr_partyui,0,row1X + (global.guiScale * (sprite_get_width(spr_partyui)+1)*row_pos),row1Y,global.guiScale,global.guiScale,0,image_blend,image_alpha);
                    draw_sprite_part_ext(spr_faceplate,c_char[? IMAGE],
                    0,0,sprite_get_width(spr_partyui),
                    obj_combat.partyHeight[t_index],
                    row1X + (global.guiScale * (sprite_get_width(spr_partyui)+1)*row_pos),
                    row1Y +(sprite_get_height(spr_partyui)*global.guiScale),
                    global.guiScale,global.guiScale,image_blend,image_alpha);
                } else {
                    draw_sprite_ext(spr_partyui,0,
                    row2X + (global.guiScale * (sprite_get_width(spr_partyui)+1)*(row_pos)),
                    row2Y,global.guiScale,global.guiScale,0,image_blend,image_alpha);
                    draw_sprite_part_ext(spr_faceplate,c_char[? IMAGE],
                    0,0,sprite_get_width(spr_partyui),
                    obj_combat.partyHeight[t_index],
                    row2X + (global.guiScale * (sprite_get_width(spr_partyui)+1)*(row_pos)),
                    row2Y +(sprite_get_height(spr_partyui)*global.guiScale),
                    global.guiScale, global.guiScale,image_blend,image_alpha);
                }
            t_index++;
            row_pos++;
            if(row_pos &gt;= 3){
                row_pos = 0;
            }
            } 
        }
    }
}

//Message box
draw_sprite_ext(spr_combat_message,0,(sprite_get_width(spr_menuBar)-1)*global.guiScale,0,global.guiScale,global.guiScale,0,image_blend,image_alpha);
draw_text_ext_transformed((sprite_get_width(spr_menuBar)+5)*global.guiScale,5*global.guiScale,battleMessageDisplay,-1,(sprite_get_width(spr_combat_message)-10)*global.guiScale,global.guiScale/2,global.guiScale/2,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
